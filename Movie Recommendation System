{
  "cells":[
    {
      "cell_type":"code",
      "source":[
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "Genres = pd.read_csv ('movie_genres.csv')\n",
        "Reviews = pd.read_csv('user_reviews.csv')\n",
        "del Reviews['Unnamed: 0']"
      ],
      "execution_count":108,
      "outputs":[
        {
          "data":{
            "text\/html":[
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "<\/style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th><\/th>\n",
              "      <th>User<\/th>\n",
              "      <th>About Last Night<\/th>\n",
              "      <th>Shattered<\/th>\n",
              "      <th>Passchendaele<\/th>\n",
              "      <th>Travelers and Magicians<\/th>\n",
              "      <th>A Dog's Breakfast<\/th>\n",
              "      <th>Broken Arrow<\/th>\n",
              "      <th>Songcatcher<\/th>\n",
              "      <th>The Importance of Being Earnest<\/th>\n",
              "      <th>Treasure Planet<\/th>\n",
              "      <th>...<\/th>\n",
              "      <th>Fat, Sick &amp; Nearly Dead<\/th>\n",
              "      <th>Across the Universe<\/th>\n",
              "      <th>Shopgirl<\/th>\n",
              "      <th>No Strings Attached<\/th>\n",
              "      <th>You Can Count on Me<\/th>\n",
              "      <th>Next Day Air<\/th>\n",
              "      <th>Enter Nowhere<\/th>\n",
              "      <th>Tidal Wave<\/th>\n",
              "      <th>Stone Cold<\/th>\n",
              "      <th>Dreamcatcher<\/th>\n",
              "    <\/tr>\n",
              "  <\/thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0<\/th>\n",
              "      <td>Vincent<\/td>\n",
              "      <td>2.0<\/td>\n",
              "      <td>3.0<\/td>\n",
              "      <td>3.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>3.0<\/td>\n",
              "      <td>4.0<\/td>\n",
              "      <td>5.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>...<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>5.0<\/td>\n",
              "      <td>3.0<\/td>\n",
              "      <td>1.0<\/td>\n",
              "      <td>5.0<\/td>\n",
              "      <td>3.0<\/td>\n",
              "      <td>4.0<\/td>\n",
              "      <td>5.0<\/td>\n",
              "      <td>5.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "    <\/tr>\n",
              "    <tr>\n",
              "      <th>557<\/th>\n",
              "      <td>Ace<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>2.0<\/td>\n",
              "      <td>2.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>3.0<\/td>\n",
              "      <td>...<\/td>\n",
              "      <td>3.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>4.0<\/td>\n",
              "    <\/tr>\n",
              "  <\/tbody>\n",
              "<\/table>\n",
              "<p>2 rows Ã— 52 columns<\/p>\n",
              "<\/div>"
            ]
          },
          "metadata":{
            
          },
          "output_type":"display_data"
        }
      ],
      "metadata":{
        
      }
    },
    {
      "cell_type":"code",
      "source":[
        "Genres"
      ],
      "execution_count":80,
      "outputs":[
        {
          "data":{
            "text\/html":[
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "<\/style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th><\/th>\n",
              "      <th>Unnamed: 0<\/th>\n",
              "      <th>movie_title<\/th>\n",
              "      <th>genre_action<\/th>\n",
              "      <th>genre_adventure<\/th>\n",
              "      <th>genre_animation<\/th>\n",
              "      <th>genre_biography<\/th>\n",
              "      <th>genre_comedy<\/th>\n",
              "      <th>genre_crime<\/th>\n",
              "      <th>genre_documentary<\/th>\n",
              "      <th>genre_drama<\/th>\n",
              "      <th>...<\/th>\n",
              "      <th>genre_mystery<\/th>\n",
              "      <th>genre_news<\/th>\n",
              "      <th>genre_reality-tv<\/th>\n",
              "      <th>genre_romance<\/th>\n",
              "      <th>genre_sci-fi<\/th>\n",
              "      <th>genre_short<\/th>\n",
              "      <th>genre_sport<\/th>\n",
              "      <th>genre_thriller<\/th>\n",
              "      <th>genre_war<\/th>\n",
              "      <th>genre_western<\/th>\n",
              "    <\/tr>\n",
              "  <\/thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0<\/th>\n",
              "      <td>0<\/td>\n",
              "      <td>The Net<\/td>\n",
              "      <td>1<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>1<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>1<\/td>\n",
              "      <td>...<\/td>\n",
              "      <td>1<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>1<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "    <\/tr>\n",
              "    <tr>\n",
              "      <th>1<\/th>\n",
              "      <td>1<\/td>\n",
              "      <td>Happily N'Ever After<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>1<\/td>\n",
              "      <td>1<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>1<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>...<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "    <\/tr>\n",
              "    <tr>\n",
              "      <th>2<\/th>\n",
              "      <td>2<\/td>\n",
              "      <td>Tomorrowland<\/td>\n",
              "      <td>1<\/td>\n",
              "      <td>1<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>...<\/td>\n",
              "      <td>1<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>1<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "    <\/tr>\n",
              "    <tr>\n",
              "      <th>3<\/th>\n",
              "      <td>3<\/td>\n",
              "      <td>American Hero<\/td>\n",
              "      <td>1<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>1<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>1<\/td>\n",
              "      <td>...<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>1<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "    <\/tr>\n",
              "    <tr>\n",
              "      <th>4<\/th>\n",
              "      <td>4<\/td>\n",
              "      <td>Das Boot<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>1<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>1<\/td>\n",
              "      <td>...<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>1<\/td>\n",
              "      <td>1<\/td>\n",
              "      <td>0<\/td>\n",
              "    <\/tr>\n",
              "    <tr>\n",
              "      <th>...<\/th>\n",
              "      <td>...<\/td>\n",
              "      <td>...<\/td>\n",
              "      <td>...<\/td>\n",
              "      <td>...<\/td>\n",
              "      <td>...<\/td>\n",
              "      <td>...<\/td>\n",
              "      <td>...<\/td>\n",
              "      <td>...<\/td>\n",
              "      <td>...<\/td>\n",
              "      <td>...<\/td>\n",
              "      <td>...<\/td>\n",
              "      <td>...<\/td>\n",
              "      <td>...<\/td>\n",
              "      <td>...<\/td>\n",
              "      <td>...<\/td>\n",
              "      <td>...<\/td>\n",
              "      <td>...<\/td>\n",
              "      <td>...<\/td>\n",
              "      <td>...<\/td>\n",
              "      <td>...<\/td>\n",
              "      <td>...<\/td>\n",
              "    <\/tr>\n",
              "    <tr>\n",
              "      <th>1995<\/th>\n",
              "      <td>1995<\/td>\n",
              "      <td>Big Fish<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>1<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>1<\/td>\n",
              "      <td>...<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "    <\/tr>\n",
              "    <tr>\n",
              "      <th>1996<\/th>\n",
              "      <td>1996<\/td>\n",
              "      <td>Get Real<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>1<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>1<\/td>\n",
              "      <td>...<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>1<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "    <\/tr>\n",
              "    <tr>\n",
              "      <th>1997<\/th>\n",
              "      <td>1997<\/td>\n",
              "      <td>Trading Places<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>1<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>...<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "    <\/tr>\n",
              "    <tr>\n",
              "      <th>1998<\/th>\n",
              "      <td>1998<\/td>\n",
              "      <td>DOA: Dead or Alive<\/td>\n",
              "      <td>1<\/td>\n",
              "      <td>1<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>...<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "    <\/tr>\n",
              "    <tr>\n",
              "      <th>1999<\/th>\n",
              "      <td>1999<\/td>\n",
              "      <td>Hey Arnold! The Movie<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>1<\/td>\n",
              "      <td>1<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>1<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>...<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "      <td>0<\/td>\n",
              "    <\/tr>\n",
              "  <\/tbody>\n",
              "<\/table>\n",
              "<p>2000 rows Ã— 27 columns<\/p>\n",
              "<\/div>"
            ]
          },
          "metadata":{
            
          },
          "output_type":"display_data"
        }
      ],
      "metadata":{
        
      }
    },
    {
      "cell_type":"code",
      "source":[
        "#spara\n",
        "#dfR2 = dfR.transpose()\n",
        "#dfR2 = dfR2.drop(['Unnamed: 0'])\n",
        "#header_row = 0\n",
        "#dfR2.columns = dfR2.iloc[header_row]\n",
        "#dfR2 = dfR2.drop(['User'])\n",
        "#dfG.reset_index(drop=True, inplace=True)\n",
        "#dfR2.reset_index(drop=True, inplace=True)\n",
        "#result = pd.concat([dfG, dfR2], axis=1, join=\"inner\")\n",
        "#result = result.drop(['Unnamed: 0'], axis=1)\n",
        "#pd.set_option('max_columns', None)\n",
        "#result.head()"
      ],
      "execution_count":81,
      "outputs":[
        
      ],
      "metadata":{
        
      }
    },
    {
      "cell_type":"code",
      "source":[
        "Genres_df1 = Genres.transpose()\n",
        "Genres_df1 = Genres_df1.drop(['Unnamed: 0'])\n",
        "header_row = 0\n",
        "Genres_df1.columns = Genres_df1.iloc[header_row]\n",
        "Genres_df1 = Genres_df1.drop(['movie_title'])\n",
        "\n",
        "Reviews_df1 = Reviews.drop(['Unnamed: 0', 'User'], axis=1)\n",
        "Genres_df1.head()"
      ],
      "execution_count":82,
      "outputs":[
        {
          "ename":"KeyError",
          "evalue":"KeyError: \"['Unnamed: 0'] not found in axis\"",
          "traceback":[
            "\u001b[0;31m---------------------------------------------------------------------------",
            "Traceback (most recent call last)",
            "    at line 7 in <module>",
            "KeyError: \"['Unnamed: 0'] not found in axis\""
          ],
          "output_type":"error"
        }
      ],
      "metadata":{
        
      }
    },
    {
      "cell_type":"markdown",
      "source":[
        
      ],
      "metadata":{
        
      }
    },
    {
      "cell_type":"code",
      "source":[
        "Reviews_df1.head()"
      ],
      "execution_count":83,
      "outputs":[
        {
          "data":{
            "text\/html":[
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "<\/style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th><\/th>\n",
              "      <th>The Net<\/th>\n",
              "      <th>Happily N'Ever After<\/th>\n",
              "      <th>Tomorrowland<\/th>\n",
              "      <th>American Hero<\/th>\n",
              "      <th>Das Boot<\/th>\n",
              "      <th>Final Destination 3<\/th>\n",
              "      <th>Licence to Kill<\/th>\n",
              "      <th>The Hundred-Foot Journey<\/th>\n",
              "      <th>The Matrix<\/th>\n",
              "      <th>Creature<\/th>\n",
              "      <th>...<\/th>\n",
              "      <th>The Martian<\/th>\n",
              "      <th>Micmacs<\/th>\n",
              "      <th>Solomon and Sheba<\/th>\n",
              "      <th>In the Company of Men<\/th>\n",
              "      <th>Silent House<\/th>\n",
              "      <th>Big Fish<\/th>\n",
              "      <th>Get Real<\/th>\n",
              "      <th>Trading Places<\/th>\n",
              "      <th>DOA: Dead or Alive<\/th>\n",
              "      <th>Hey Arnold! The Movie<\/th>\n",
              "    <\/tr>\n",
              "  <\/thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0<\/th>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>...<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "    <\/tr>\n",
              "    <tr>\n",
              "      <th>1<\/th>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>...<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "    <\/tr>\n",
              "    <tr>\n",
              "      <th>2<\/th>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>...<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "    <\/tr>\n",
              "    <tr>\n",
              "      <th>3<\/th>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>...<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "    <\/tr>\n",
              "    <tr>\n",
              "      <th>4<\/th>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>...<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "      <td>0.0<\/td>\n",
              "    <\/tr>\n",
              "  <\/tbody>\n",
              "<\/table>\n",
              "<p>5 rows Ã— 2000 columns<\/p>\n",
              "<\/div>"
            ]
          },
          "metadata":{
            
          },
          "output_type":"display_data"
        }
      ],
      "metadata":{
        
      }
    },
    {
      "cell_type":"code",
      "source":[
        "from surprise import SVD\n",
        "from surprise import Dataset\n",
        "from surprise import Reader\n",
        "\n",
        "algo = SVD()\n",
        "reader = Reader(line_format='item user rating', sep=',', rating_scale=(1,5), skip_lines=1)\n",
        "data = Dataset.load_from_file('user_reviews.csv',reader)\n",
        "trainset = data.build_full_trainset()\n",
        "algo.fit(trainset)\n",
        "\n",
        "# Then predict ratings for all pairs (u, i) that are NOT in the training set.\n",
        "testset = trainset.build_anti_testset()\n",
        "predictions = algo.test(testset)\n",
        "predictions"
      ],
      "execution_count":84,
      "outputs":[
        {
          "ename":"KeyboardInterrupt",
          "evalue":"KeyboardInterrupt: ",
          "traceback":[
            "\u001b[0;31m---------------------------------------------------------------------------",
            "Traceback (most recent call last)",
            "    at line 12 in <module>",
            "KeyboardInterrupt: "
          ],
          "output_type":"error"
        }
      ],
      "metadata":{
        
      }
    },
    {
      "cell_type":"code",
      "source":[
        "from surprise.model_selection import cross_validate\n",
        "cross_validate(algo, data, measures=['RMSE'], cv=5, verbose=True)"
      ],
      "execution_count":70,
      "outputs":[
        {
          "name":"stdout",
          "text":[
            "Evaluating RMSE of algorithm SVD on 5 split(s).\n",
            "\n",
            "                  Fold 1  Fold 2  Fold 3  Fold 4  Fold 5  Mean    Std     \n",
            "RMSE (testset)    1.0567  1.0607  1.0724  1.2616  1.1180  1.1139  0.0770  \n",
            "Fit time          0.04    0.03    0.03    0.03    0.03    0.03    0.00    \n",
            "Test time         0.00    0.00    0.00    0.00    0.00    0.00    0.00    \n"
          ],
          "output_type":"stream"
        },
        {
          "data":{
            "text\/plain":[
              "{'test_rmse': array([1.0567245 , 1.06066017, 1.07238053, 1.26161272, 1.11803399]),\n",
              " 'fit_time': (0.035471439361572266,\n",
              "  0.034233808517456055,\n",
              "  0.03309941291809082,\n",
              "  0.03265047073364258,\n",
              "  0.03453660011291504),\n",
              " 'test_time': (0.0010538101196289062,\n",
              "  0.0010247230529785156,\n",
              "  0.001035451889038086,\n",
              "  0.000993490219116211,\n",
              "  0.001111745834350586)}"
            ]
          },
          "metadata":{
            
          },
          "output_type":"display_data"
        }
      ],
      "metadata":{
        
      }
    },
    {
      "cell_type":"code",
      "source":[
        "from collections import defaultdict\n",
        "\n",
        "def get_top_5(predictions):\n",
        "\n",
        "    # First map the predictions to each user.\n",
        "    top_5 = defaultdict(list)\n",
        "    for user, movie, true_r, est, _ in predictions:\n",
        "        top_5[user].append((movie, est))\n",
        "\n",
        "    # Then sort the predictions for each user and retrieve the k highest ones.\n",
        "    for user, user_ratings in top_5.items():\n",
        "        user_ratings.sort(key=lambda x: x[1], reverse=True)\n",
        "        top_5[user] = user_ratings[:5]\n",
        "\n",
        "    return top_5\n",
        "\n",
        "top_5 = get_top_5(predictions)"
      ],
      "execution_count":71,
      "outputs":[
        
      ],
      "metadata":{
        
      }
    },
    {
      "cell_type":"code",
      "source":[
        "# Print the recommended items for a chosen user\n",
        "Reviews_df1 = Reviews.drop('User', axis=1)\n",
        "def top5(user):\n",
        "    list1 = []\n",
        "    for uid, user_ratings in top_5.items():\n",
        "        if uid==user:\n",
        "            list1.append([iid for (iid, _) in user_ratings])\n",
        "    list2 = []\n",
        "    for obj in list1:\n",
        "        for o in obj:   \n",
        "            list2.append(Reviews_df1.columns[int(o)])\n",
        "    print (user + \" should really watch the following 5 movies:\")\n",
        "    for o in list2:\n",
        "        print(o)\n",
        "\n",
        "top5('Mariana')"
      ],
      "execution_count":72,
      "outputs":[
        {
          "name":"stdout",
          "text":[
            "Mariana should really watch the following 5 movies:\n",
            "The Fourth Kind\n",
            "The Net\n",
            "Happily N'Ever After\n",
            "Tomorrowland\n",
            "American Hero\n"
          ],
          "output_type":"stream"
        }
      ],
      "metadata":{
        
      }
    },
    {
      "cell_type":"code",
      "source":[
        "# Example of calculating Euclidean distance\n",
        "from math import sqrt\n",
        "\n",
        "# calculate the Euclidean distance between two rows\n",
        "def euclidean_distance(row1, row2):\n",
        "\tdistance = 0.0\n",
        "\tcount = 0.0\n",
        "\tfor i in range(len(row1)-1):\n",
        "\t\tif row1[i] != 0 and row2[i] !=0:\n",
        "\t\t\tdistance += (row1[i] - row2[i])**2\n",
        "\t\t\tcount = count+1\n",
        "\tif count == 0:\n",
        "\t\treturn sqrt(distance)\n",
        "\treturn (sqrt(distance)\/count)\n",
        "\n",
        "dataset = Reviews.to_numpy()\n",
        "dataset2 = np.delete(dataset,0, 1)\n",
        "row0 = dataset2[4]\n",
        "arr=[]*0\n",
        "\n",
        "for row in dataset2:\n",
        "\tdistance = euclidean_distance(row0, row)\n",
        "\tarr.append(distance)\n",
        "\n",
        "du = pd.DataFrame(arr, columns = ['Distance']) \n",
        "du['User'] = Reviews['User']\n",
        "du = du[du['Distance'] != 0]\n",
        "du = du.append({'User': 'Javier', 'Distance': 0} , ignore_index=True)\n",
        "\n",
        "du = du.sort_values(by=['Distance'], ascending=True)\n",
        "du"
      ],
      "execution_count":153,
      "outputs":[
        {
          "data":{
            "text\/html":[
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "<\/style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th><\/th>\n",
              "      <th>Distance<\/th>\n",
              "      <th>User<\/th>\n",
              "    <\/tr>\n",
              "  <\/thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>157<\/th>\n",
              "      <td>0.000000<\/td>\n",
              "      <td>Javier<\/td>\n",
              "    <\/tr>\n",
              "    <tr>\n",
              "      <th>83<\/th>\n",
              "      <td>0.333333<\/td>\n",
              "      <td>Dalton<\/td>\n",
              "    <\/tr>\n",
              "    <tr>\n",
              "      <th>136<\/th>\n",
              "      <td>0.500000<\/td>\n",
              "      <td>Theodore<\/td>\n",
              "    <\/tr>\n",
              "    <tr>\n",
              "      <th>156<\/th>\n",
              "      <td>0.500000<\/td>\n",
              "      <td>Nora<\/td>\n",
              "    <\/tr>\n",
              "    <tr>\n",
              "      <th>152<\/th>\n",
              "      <td>0.500000<\/td>\n",
              "      <td>Fabian<\/td>\n",
              "    <\/tr>\n",
              "    <tr>\n",
              "      <th>...<\/th>\n",
              "      <td>...<\/td>\n",
              "      <td>...<\/td>\n",
              "    <\/tr>\n",
              "    <tr>\n",
              "      <th>74<\/th>\n",
              "      <td>3.000000<\/td>\n",
              "      <td>Amir<\/td>\n",
              "    <\/tr>\n",
              "    <tr>\n",
              "      <th>36<\/th>\n",
              "      <td>3.000000<\/td>\n",
              "      <td>Presley<\/td>\n",
              "    <\/tr>\n",
              "    <tr>\n",
              "      <th>38<\/th>\n",
              "      <td>4.000000<\/td>\n",
              "      <td>Fatima<\/td>\n",
              "    <\/tr>\n",
              "    <tr>\n",
              "      <th>25<\/th>\n",
              "      <td>4.000000<\/td>\n",
              "      <td>Ryan<\/td>\n",
              "    <\/tr>\n",
              "    <tr>\n",
              "      <th>113<\/th>\n",
              "      <td>4.000000<\/td>\n",
              "      <td>Kylee<\/td>\n",
              "    <\/tr>\n",
              "  <\/tbody>\n",
              "<\/table>\n",
              "<p>158 rows Ã— 2 columns<\/p>\n",
              "<\/div>"
            ]
          },
          "metadata":{
            
          },
          "output_type":"display_data"
        }
      ],
      "metadata":{
        
      }
    },
    {
      "cell_type":"code",
      "source":[
        "#Create a list with the index number from dataframe Reviews for 5 nearest neighbours \n",
        "nearest_neighbors= []\n",
        "\n",
        "for i in range(0,5):\n",
        "    nearest_neighbors.append(du.index[i])\n",
        "nearest_neighbors"
      ],
      "execution_count":154,
      "outputs":[
        {
          "data":{
            "text\/plain":[
              "[157, 83, 136, 156, 152]"
            ]
          },
          "metadata":{
            
          },
          "output_type":"display_data"
        }
      ],
      "metadata":{
        
      }
    },
    {
      "cell_type":"code",
      "source":[
        "#plocka ut alla filmer som ace har sett som inte Vincent sett\n",
        "#ReviewsDropped = Reviews['User'] = 'Ace'\n",
        "\n",
        "\n",
        "Satan  = Reviews[Reviews.index.isin(nearest_neighbors)]\n",
        "#dfu= Filter_df.join(du)\n",
        "\n",
        "#Create reviews dataframe with nearest neighbors\n",
        "Filter_df = pd.merge(du, Satan, left_index=True, right_index=True)\n",
        "\n",
        "#Drop all movies that X has already seen\n",
        "Filter_df = Filter_df.loc[:, (Filter_df != 0).any(axis=0)]\n",
        "Filter_df = Filter_df.loc[: ,(Filter_df == 0).any(axis=0)]\n",
        "\n",
        "\n",
        "df_new =  Filter_df[Filter_df.columns[Filter_df.iloc[0] == 0.0]]\n",
        "df_new.mean(axis = 0) \n",
        "\n",
        "df_new = df_new.sort_values(by = 'Distance', ascending=True) \n",
        "\n",
        "\n",
        "df_new = df_new.replace(0, np.NaN)\n",
        "df_new.loc['Mean'] = df_new.mean()\n",
        "rslt_df = df_new.sort_values(by = 'Mean', axis = 1, ascending=False) \n",
        "\n",
        "recomendas = rslt_df.iloc[:, 1:6]\n",
        "\n",
        "print('\\033[1m' + 'The top 5 recommendations for ' + du['User'].iloc[0] + '\\033[0m')\n",
        "for col in recomendas.columns: \n",
        "    print(col) "
      ],
      "execution_count":155,
      "outputs":[
        {
          "name":"stdout",
          "text":[
            "\u001b[1mThe top 5 recommendations for Javier\u001b[0m\n",
            "The Tempest\n",
            "Big Eyes\n",
            "A Scanner Darkly\n",
            "The Internship\n",
            "New York Minute\n"
          ],
          "output_type":"stream"
        }
      ],
      "metadata":{
        
      }
    }
  ],
  "metadata":{
    
  },
  "nbformat":4,
  "nbformat_minor":0
}